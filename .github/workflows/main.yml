name: Deploy API via SSH

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ec2-user@${{ secrets.HOST }} "echo 'SSH connection successful'"
          
      - name: Prepare destination directory
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          mkdir -p /home/ec2-user/ecommerce-api
          EOF
          
      - name: Build application locally
        run: |
          echo "=== Installing dependencies ==="
          npm ci
          echo "=== Building application ==="
          npm run build
          echo "=== Verificando build local ==="
          ls -la
          echo "=== Verificando dist/ ==="
          ls -la dist/
          echo "=== Verificando dist/src/ ==="
          ls -la dist/src/
          echo "=== Verificando main.js ==="
          test -f dist/src/main.js && echo "✓ Build successful - main.js found" || (echo "❌ Build failed - main.js not found" && exit 1)
          echo "=== Checking total files to upload ==="
          find . -type f | grep -E '\.(js|json|ts)
          
      - name: Upload project to EC2
        run: |
          echo "=== Uploading files to EC2 ==="
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            --exclude='coverage' \
            --exclude='tmp' \
            --exclude='*.tmp' \
            --exclude='tsconfig.tsbuildinfo' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            . ec2-user@${{ secrets.HOST }}:/home/ec2-user/ecommerce-api/
          echo "=== Upload completed ==="
            
      - name: Verify uploaded files
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          cd /home/ec2-user/ecommerce-api
          echo "=== Verificando arquivos enviados ==="
          ls -la
          echo "=== Verificando se dist/ foi enviado ==="
          if [ -d "dist" ]; then
            echo "✓ dist/ directory found"
            ls -la dist/
            echo "=== Verificando dist/src/ ==="
            ls -la dist/src/ 2>/dev/null || echo "dist/src/ not found"
          else
            echo "❌ dist/ directory NOT found"
          fi
          echo "=== Verificando src/ ==="
          ls -la src/ 2>/dev/null || echo "src/ não encontrado"
          echo "=== Verificando arquivos de configuração ==="
          ls -la *.json 2>/dev/null || echo "Arquivos .json não encontrados"
          EOF
            
      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          cd /home/ec2-user/ecommerce-api
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || true
