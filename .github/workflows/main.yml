name: Deploy API via SSH

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ec2-user@${{ secrets.HOST }} "echo 'SSH connection successful'"
          
      - name: Prepare destination directory
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          mkdir -p /home/ec2-user/ecommerce-api
          EOF
          
      - name: Upload project to EC2
        run: |
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            --exclude='coverage' \
            --exclude='dist' \
            --exclude='build' \
            --exclude='tmp' \
            --exclude='*.tmp' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            . ec2-user@${{ secrets.HOST }}:/home/ec2-user/ecommerce-api/
            
      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          cd /home/ec2-user/ecommerce-api
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Remove unused Docker resources
          echo "Cleaning up Docker resources..."
          docker system prune -f || true
          
          # Build and start containers
          echo "Building and starting containers..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Show running containers
          echo "Running containers:"
          docker-compose ps
          
          # Show logs for debugging
          echo "Recent logs:"
          docker-compose logs --tail=50
          EOF
          
      - name: Health check
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          echo "Waiting for application to start..."
          sleep 10
          
          # Check if containers are running
          if docker-compose -f /home/ec2-user/ecommerce-api/docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Deployment successful - containers are running"
          else
            echo "❌ Deployment failed - containers not running"
            docker-compose -f /home/ec2-user/ecommerce-api/docker-compose.yml logs
            exit 1
          fi
          EOF
