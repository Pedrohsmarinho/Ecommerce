name: Deploy API via SSH

on:
  push:
    branches: [main]
  workflow_dispatch: # Allow manual trigger

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
      - name: Add known hosts
        run: |
          ssh-keyscan -H ${{ secrets.HOST }} >> ~/.ssh/known_hosts
          
      - name: Test SSH connection
        run: |
          ssh -i ~/.ssh/id_rsa -o ConnectTimeout=10 ec2-user@${{ secrets.HOST }} "echo 'SSH connection successful'"
          
      - name: Prepare destination directory
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          mkdir -p /home/ec2-user/ecommerce-api
          EOF
          
      - name: Build application locally
        run: |
          echo "=== Installing dependencies ==="
          npm ci
          echo "=== Building application ==="
          npm run build
          echo "=== Verificando build local ==="
          ls -la
          echo "=== Verificando dist/ ==="
          ls -la dist/
          echo "=== Verificando dist/src/ ==="
          ls -la dist/src/
          echo "=== Verificando main.js ==="
          test -f dist/src/main.js && echo "✓ Build successful - main.js found" || (echo "❌ Build failed - main.js not found" && exit 1)
          
      - name: Upload project to EC2
        run: |
          echo "=== Uploading files to EC2 ==="
          rsync -avz --delete \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env*' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            --exclude='coverage' \
            --exclude='tmp' \
            --exclude='*.tmp' \
            --exclude='tsconfig.tsbuildinfo' \
            -e "ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no" \
            . ec2-user@${{ secrets.HOST }}:/home/ec2-user/ecommerce-api/
          echo "=== Upload completed ==="
            
      - name: Verify uploaded files
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          cd /home/ec2-user/ecommerce-api
          echo "=== Verificando arquivos enviados ==="
          ls -la
          echo "=== Verificando se dist/ foi enviado ==="
          if [ -d "dist" ]; then
            echo "✓ dist/ directory found"
            ls -la dist/
            echo "=== Verificando dist/src/ ==="
            if [ -d "dist/src" ]; then
              echo "✓ dist/src/ directory found"
              ls -la dist/src/
              echo "=== Verificando main.js ==="
              if [ -f "dist/src/main.js" ]; then
                echo "✓ main.js found - ready for Docker"
              else
                echo "❌ main.js NOT found"
              fi
            else
              echo "❌ dist/src/ directory NOT found"
            fi
          else
            echo "❌ dist/ directory NOT found"
            echo "Available files:"
            ls -la
          fi
          EOF
          
      - name: Deploy application
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          cd /home/ec2-user/ecommerce-api
          
          # Stop existing containers
          echo "Stopping existing containers..."
          docker-compose down || true
          
          # Remove unused Docker resources
          echo "Cleaning up Docker resources..."
          docker system prune -f || true
          
          # Build and start containers
          echo "Building and starting containers..."
          docker-compose build --no-cache
          docker-compose up -d
          
          # Show running containers
          echo "Running containers:"
          docker-compose ps
          
          # Show logs for debugging
          echo "Recent logs:"
          docker-compose logs --tail=50
          EOF
          
      - name: Health check
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.HOST }} << 'EOF'
          echo "Waiting for application to start..."
          sleep 15
          
          # Check if containers are running
          if docker-compose -f /home/ec2-user/ecommerce-api/docker-compose.yml ps | grep -q "Up"; then
            echo "✅ Deployment successful - containers are running"
            docker-compose -f /home/ec2-user/ecommerce-api/docker-compose.yml ps
          else
            echo "❌ Deployment failed - containers not running"
            docker-compose -f /home/ec2-user/ecommerce-api/docker-compose.yml logs
            exit 1
          fi
          EOF
